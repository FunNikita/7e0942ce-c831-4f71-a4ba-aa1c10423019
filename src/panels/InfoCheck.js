import React from 'react';
import PropTypes from 'prop-types';
import bridge from '@vkontakte/vk-bridge';
import Panel from '@vkontakte/vkui/dist/components/Panel/Panel';
import PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader';
import Group from '@vkontakte/vkui/dist/components/Group/Group';
import PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton';
import Cell from '@vkontakte/vkui/dist/components/Cell/Cell';
import Div from '@vkontakte/vkui/dist/components/Div/Div';
import Button from '@vkontakte/vkui/dist/components/Button/Button';
import FormLayout from '@vkontakte/vkui/dist/components/FormLayout/FormLayout';
import FormStatus from '@vkontakte/vkui/dist/components/FormStatus/FormStatus';
import Icon24Back from '@vkontakte/icons/dist/24/back';
import Icon24View from '@vkontakte/icons/dist/24/view';
import Icon24Linked from '@vkontakte/icons/dist/24/linked';
import Icon24Fullscreen from '@vkontakte/icons/dist/24/fullscreen';
import Icon24Globe from '@vkontakte/icons/dist/24/globe';
import Icon24Airplay from '@vkontakte/icons/dist/24/airplay';
import Icon24Similar from '@vkontakte/icons/dist/24/similar';
import Icon24Followers from '@vkontakte/icons/dist/24/followers';
import Icon24Qr from '@vkontakte/icons/dist/24/qr';
import './copy.css';

const InfoCheck = props => (
    <Panel id={props.id}>
        <PanelHeader
            left={<PanelHeaderButton onClick={props.go} data-to="home" >
                {<Icon24Back />}
            </PanelHeaderButton>}>
            {props.name}
        </PanelHeader>
        <FormLayout>
            <FormStatus mode="valid">
            –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª–µ —Å —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
  </FormStatus>
        </FormLayout>
        <Group>
            <Cell before={<Icon24Globe />} description={props.hostname} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.hostname}` });
            }}>–†–µ—Å—É—Ä—Å</Cell>
            <Cell before={<Icon24Linked />} description={props.ip_info} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.ip_info}` });
            }}>IP</Cell>
            <Cell before={<Icon24Followers />} description={props.country} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.country}` });
            }}>–°—Ç—Ä–∞–Ω–∞</Cell>
            <Cell before={<Icon24Followers />} description={props.city} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.city}` });
            }}>–ì–æ—Ä–æ–¥</Cell>
            <Cell before={<Icon24Qr />} description={props.org} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.org}` });
            }}>–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è</Cell>
            <Cell before={<Icon24Airplay />} description={props.isp} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.isp}` });
            }}>–ü—Ä–æ–≤–∞–π–¥–µ—Ä</Cell>
            <Cell before={<Icon24Similar />} description={props.as} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.as}` });
            }}>AS</Cell>
            <Cell before={<Icon24Fullscreen />} description={props.ping} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.ping}` });
            }}>Ping</Cell>
            <Cell before={<Icon24View />} description={props.views} onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `${props.views}` });
            }}>–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</Cell>
        </Group>
        <Div>
            <Button size="xl" mode="secondary" onClick={() => {
                bridge.send("VKWebAppCopyText", { "text": `https://vk.com/app7652913#h=${props.hash_uid}` });
            }}>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</Button>
        </Div>
        <Div style={{ display: 'flex' }}>
            <Button size="l" stretched style={{ marginRight: 8 }} onClick={() => {
                bridge.send("VKWebAppShowWallPostBox", {
                    "message": `‚Ñπ –Ø —É–∑–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—Å—É—Ä—Å–µ ¬´${props.value_check}¬ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ IP Checker! 
                    
üîó –ü–æ–ø—Ä–æ–±—É–π –∏ —Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: https://vk.com/app7652913#h=${props.hash_uid}`
                });
            }}>–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–µ–Ω–µ</Button>
            <Button size="l" stretched onClick={() => {
                bridge.send("VKWebAppShare", { "link": `https://vk.com/app7652913#h=${props.hash_uid}` });
            }}>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è</Button>
        </Div>
        {props.snackbar}
    </Panel>
);

InfoCheck.propTypes = {
    id: PropTypes.string.isRequired,
    go: PropTypes.func.isRequired,
};

export default InfoCheck;
